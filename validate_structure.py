"""
Script de validation de la structure du projet GLaDOS
Ne n√©cessite aucune d√©pendance externe
"""

import ast
import yaml
from pathlib import Path


def validate_project_structure():
    """V√©rifie que la structure du projet est correcte"""
    print("üîç Validation de la structure du projet...")
    
    project_root = Path(__file__).parent
    errors = []
    
    # R√©pertoires principaux
    required_dirs = [
        "glados",
        "glados/core", 
        "glados/config",
        "glados/inputs",
        "glados/inputs/wake_word",
        "glados/inputs/terminal",
        "glados/outputs",
        "glados/outputs/tts",
        "glados/outputs/terminal",
        "glados/tools",
        "glados/tools/tapo",
        "glados/tools/adapters",
        "tests"
    ]
    
    for dir_path in required_dirs:
        full_path = project_root / dir_path
        if not full_path.exists():
            errors.append(f"‚ùå R√©pertoire manquant: {dir_path}")
        else:
            print(f"‚úÖ R√©pertoire pr√©sent: {dir_path}")
    
    # Fichiers essentiels
    required_files = [
        "config.yaml",
        ".env.example", 
        "requirements.txt",
        "README.md",
        "ARCHITECTURE.md",
        "run_glados.py",
        "setup.py",
        "glados/main.py",
        "glados/__init__.py"
    ]
    
    for file_path in required_files:
        full_path = project_root / file_path
        if not full_path.exists():
            errors.append(f"‚ùå Fichier manquant: {file_path}")
        else:
            print(f"‚úÖ Fichier pr√©sent: {file_path}")
    
    return errors


def validate_python_syntax():
    """V√©rifie que tous les fichiers Python ont une syntaxe valide"""
    print("\\nüêç Validation de la syntaxe Python...")
    
    project_root = Path(__file__).parent
    python_files = list(project_root.glob("**/*.py"))
    errors = []
    
    for py_file in python_files:
        try:
            with open(py_file, 'r', encoding='utf-8') as f:
                content = f.read()
            ast.parse(content)
            print(f"‚úÖ Syntaxe valide: {py_file.relative_to(project_root)}")
        except SyntaxError as e:
            errors.append(f"‚ùå Erreur syntaxe {py_file.relative_to(project_root)}: {e}")
        except Exception as e:
            errors.append(f"‚ùå Erreur lecture {py_file.relative_to(project_root)}: {e}")
    
    return errors


def validate_config_file():
    """V√©rifie la structure du fichier de configuration"""
    print("\\n‚öôÔ∏è Validation du fichier de configuration...")
    
    project_root = Path(__file__).parent
    config_file = project_root / "config.yaml"
    errors = []
    
    try:
        with open(config_file, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        
        # Sections principales
        required_sections = ['core', 'inputs', 'outputs', 'tools']
        for section in required_sections:
            if section not in config:
                errors.append(f"‚ùå Section manquante dans config.yaml: {section}")
            else:
                print(f"‚úÖ Section pr√©sente: {section}")
        
        # V√©rifications sp√©cifiques
        if 'core' in config:
            if 'model_name' not in config['core']:
                errors.append("‚ùå model_name manquant dans core")
            else:
                print(f"‚úÖ Model configur√©: {config['core']['model_name']}")
        
    except Exception as e:
        errors.append(f"‚ùå Erreur lecture config.yaml: {e}")
    
    return errors


def validate_requirements():
    """V√©rifie le fichier requirements.txt"""
    print("\\nüì¶ Validation des d√©pendances...")
    
    project_root = Path(__file__).parent
    requirements_file = project_root / "requirements.txt"
    errors = []
    
    try:
        with open(requirements_file, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        packages = [line.strip() for line in lines 
                   if line.strip() and not line.strip().startswith('#')]
        
        essential_packages = ['llama-index', 'pyyaml', 'sounddevice', 'vosk']
        for pkg in essential_packages:
            found = any(pkg in line for line in packages)
            if found:
                print(f"‚úÖ Package essentiel pr√©sent: {pkg}")
            else:
                errors.append(f"‚ùå Package essentiel manquant: {pkg}")
                
    except Exception as e:
        errors.append(f"‚ùå Erreur lecture requirements.txt: {e}")
    
    return errors


def main():
    """Fonction principale de validation"""
    print("=" * 60)
    print("ü§ñ GLaDOS - Validation de la structure du projet")
    print("=" * 60)
    
    all_errors = []
    
    # Validation de la structure
    all_errors.extend(validate_project_structure())
    
    # Validation syntaxe Python
    all_errors.extend(validate_python_syntax())
    
    # Validation configuration
    all_errors.extend(validate_config_file())
    
    # Validation d√©pendances
    all_errors.extend(validate_requirements())
    
    # R√©sum√©
    print("\\n" + "=" * 60)
    print("üìä R√âSUM√â DE LA VALIDATION")
    print("=" * 60)
    
    if all_errors:
        print(f"‚ùå {len(all_errors)} erreur(s) trouv√©e(s):")
        for error in all_errors:
            print(f"   {error}")
        print("\\nüîß Veuillez corriger ces erreurs avant de continuer.")
        return False
    else:
        print("üéâ Toutes les validations ont r√©ussi!")
        print("‚úÖ La structure du projet GLaDOS est correcte")
        print("‚úÖ Tous les fichiers Python ont une syntaxe valide")
        print("‚úÖ La configuration est bien form√©e")
        print("‚úÖ Les d√©pendances essentielles sont list√©es")
        print("\\nüöÄ Le projet est pr√™t pour l'installation et les tests!")
        return True


if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)